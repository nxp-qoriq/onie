From 910565dd0203ab51ebcafdfcb84ca0e79b28cb35 Mon Sep 17 00:00:00 2001
From: Guanhua Gao <guanhua.gao@nxp.com>
Date: Tue, 16 Oct 2018 11:24:52 +0800
Subject: [PATCH 302/448] bus: fsl-mc: Add devices to iommu group

Add devices to iommu group.

Integrated-by: Zhao Qiang <qiang.zhao@nxp.com>
---
 drivers/bus/fsl-mc/Makefile               |    3 +-
 drivers/bus/fsl-mc/fsl-mc-bus.c           |   12 +++
 drivers/bus/fsl-mc/fsl-mc-iommu.c         |   78 +++++++++++++++++++++
 drivers/staging/fsl-mc/bus/fsl-mc-iommu.c |  104 -----------------------------
 include/linux/fsl/mc.h                    |    5 ++
 5 files changed, 97 insertions(+), 105 deletions(-)
 create mode 100644 drivers/bus/fsl-mc/fsl-mc-iommu.c
 delete mode 100644 drivers/staging/fsl-mc/bus/fsl-mc-iommu.c

diff --git a/drivers/bus/fsl-mc/Makefile b/drivers/bus/fsl-mc/Makefile
index 2017bdb..5093bc4 100644
--- a/drivers/bus/fsl-mc/Makefile
+++ b/drivers/bus/fsl-mc/Makefile
@@ -15,7 +15,8 @@ mc-bus-driver-objs := fsl-mc-bus.o \
 		      dprc-driver.o \
 		      fsl-mc-allocator.o \
 		      fsl-mc-msi.o \
-		      dpmcp.o
+		      dpmcp.o \
+		      fsl-mc-iommu.o
 
 # MC restool kernel support
 obj-$(CONFIG_FSL_MC_RESTOOL) += fsl-mc-restool.o
diff --git a/drivers/bus/fsl-mc/fsl-mc-bus.c b/drivers/bus/fsl-mc/fsl-mc-bus.c
index 8f72d9c..7564e58 100644
--- a/drivers/bus/fsl-mc/fsl-mc-bus.c
+++ b/drivers/bus/fsl-mc/fsl-mc-bus.c
@@ -18,6 +18,7 @@
 #include <linux/bitops.h>
 #include <linux/msi.h>
 #include <linux/dma-mapping.h>
+#include <linux/fsl/mc.h>
 
 #include "fsl-mc-private.h"
 
@@ -693,6 +694,8 @@ int fsl_mc_device_add(struct fsl_mc_obj_desc *obj_desc,
 	struct fsl_mc_device *mc_dev = NULL;
 	struct fsl_mc_bus *mc_bus = NULL;
 	struct fsl_mc_device *parent_mc_dev;
+	struct device *fsl_mc_platform_dev;
+	struct device_node *fsl_mc_platform_node;
 
 	if (dev_is_fsl_mc(parent_dev))
 		parent_mc_dev = to_fsl_mc_device(parent_dev);
@@ -805,6 +808,15 @@ int fsl_mc_device_add(struct fsl_mc_obj_desc *obj_desc,
 			goto error_cleanup_dev;
 	}
 
+	fsl_mc_platform_dev = &mc_dev->dev;
+	while (dev_is_fsl_mc(fsl_mc_platform_dev))
+		fsl_mc_platform_dev = fsl_mc_platform_dev->parent;
+	fsl_mc_platform_node = fsl_mc_platform_dev->of_node;
+
+	/* Set up the iommu configuration for the devices. */
+	fsl_mc_dma_configure(mc_dev, fsl_mc_platform_node,
+		!(obj_desc->flags & DPRC_OBJ_FLAG_NO_MEM_SHAREABILITY));
+
 	/*
 	 * The device-specific probe callback will get invoked by device_add()
 	 */
diff --git a/drivers/bus/fsl-mc/fsl-mc-iommu.c b/drivers/bus/fsl-mc/fsl-mc-iommu.c
new file mode 100644
index 0000000..f90650b
--- /dev/null
+++ b/drivers/bus/fsl-mc/fsl-mc-iommu.c
@@ -0,0 +1,78 @@
+/*
+ * Copyright 2016 Freescale Semiconductor, Inc.
+ * Copyright 2017 NXP
+ * Author: Nipun Gupta <nipun.gupta@nxp.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/iommu.h>
+#include <linux/of.h>
+#include <linux/of_iommu.h>
+#include <linux/fsl/mc.h>
+
+/* Setup the IOMMU for the DPRC container */
+static const struct iommu_ops
+*fsl_mc_iommu_configure(struct fsl_mc_device *mc_dev,
+	struct device_node *fsl_mc_platform_node)
+{
+	struct of_phandle_args iommu_spec;
+	const struct iommu_ops *ops;
+	u32 iommu_phandle;
+	struct device_node *iommu_node;
+	const __be32 *map = NULL;
+	int iommu_cells, map_len, ret;
+
+	map = of_get_property(fsl_mc_platform_node, "iommu-map", &map_len);
+	if (!map)
+		return NULL;
+
+	ops = mc_dev->dev.bus->iommu_ops;
+	if (!ops || !ops->of_xlate)
+		return NULL;
+
+	iommu_phandle = be32_to_cpup(map + 1);
+	iommu_node = of_find_node_by_phandle(iommu_phandle);
+
+	if (of_property_read_u32(iommu_node, "#iommu-cells", &iommu_cells)) {
+		pr_err("%s: missing #iommu-cells property\n", iommu_node->name);
+		return NULL;
+	}
+
+	/* Initialize the fwspec */
+	ret = iommu_fwspec_init(&mc_dev->dev, &iommu_node->fwnode, ops);
+	if (ret)
+		return NULL;
+
+	/*
+	 * Fill in the required stream-id before calling the iommu's
+	 * ops->xlate callback.
+	 */
+	iommu_spec.np = iommu_node;
+	iommu_spec.args[0] = mc_dev->icid;
+	iommu_spec.args_count = 1;
+
+	ret = ops->of_xlate(&mc_dev->dev, &iommu_spec);
+	if (ret)
+		return NULL;
+
+	of_node_put(iommu_spec.np);
+
+	return ops;
+}
+
+/* Set up DMA configuration for fsl-mc devices */
+void fsl_mc_dma_configure(struct fsl_mc_device *mc_dev,
+	struct device_node *fsl_mc_platform_node, int coherent)
+{
+	const struct iommu_ops *ops;
+
+	ops = fsl_mc_iommu_configure(mc_dev, fsl_mc_platform_node);
+
+	mc_dev->dev.coherent_dma_mask = DMA_BIT_MASK(48);
+	mc_dev->dev.dma_mask = &mc_dev->dev.coherent_dma_mask;
+	arch_setup_dma_ops(&mc_dev->dev, 0,
+		mc_dev->dev.coherent_dma_mask + 1, ops, coherent);
+}
diff --git a/drivers/staging/fsl-mc/bus/fsl-mc-iommu.c b/drivers/staging/fsl-mc/bus/fsl-mc-iommu.c
deleted file mode 100644
index 86b2cd8..0000000
--- a/drivers/staging/fsl-mc/bus/fsl-mc-iommu.c
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright 2016-17 NXP
- * Author: Nipun Gupta <nipun.gupta@nxp.com>
- *
- * This file is licensed under the terms of the GNU General Public
- * License version 2. This program is licensed "as is" without any
- * warranty of any kind, whether express or implied.
- */
-
-#include <linux/iommu.h>
-#include <linux/of.h>
-#include <linux/of_iommu.h>
-#include "../include/mc.h"
-
-/* Setup the IOMMU for the DPRC container */
-static const struct iommu_ops
-*fsl_mc_iommu_configure(struct fsl_mc_device *mc_dev,
-	struct device_node *fsl_mc_platform_node)
-{
-	struct of_phandle_args iommu_spec;
-	const struct iommu_ops *ops;
-	u32 iommu_phandle;
-	struct device_node *iommu_node;
-	const __be32 *map = NULL;
-	int iommu_cells, map_len, ret;
-
-	map = of_get_property(fsl_mc_platform_node, "iommu-map", &map_len);
-	if (!map)
-		return NULL;
-
-	ops = mc_dev->dev.bus->iommu_ops;
-	if (!ops || !ops->of_xlate)
-		return NULL;
-
-	iommu_phandle = be32_to_cpup(map + 1);
-	iommu_node = of_find_node_by_phandle(iommu_phandle);
-
-	if (of_property_read_u32(iommu_node, "#iommu-cells", &iommu_cells)) {
-		pr_err("%s: missing #iommu-cells property\n", iommu_node->name);
-		return NULL;
-	}
-
-	/* Initialize the fwspec */
-	ret = iommu_fwspec_init(&mc_dev->dev, &iommu_node->fwnode, ops);
-	if (ret)
-		return NULL;
-
-	/*
-	 * Fill in the required stream-id before calling the iommu's
-	 * ops->xlate callback.
-	 */
-	iommu_spec.np = iommu_node;
-	iommu_spec.args[0] = mc_dev->icid;
-	iommu_spec.args_count = 1;
-
-	ret = ops->of_xlate(&mc_dev->dev, &iommu_spec);
-	if (ret)
-		return NULL;
-
-	of_node_put(iommu_spec.np);
-
-	return ops;
-}
-
-/* Set up DMA configuration for fsl-mc devices */
-void fsl_mc_dma_configure(struct fsl_mc_device *mc_dev,
-	struct device_node *fsl_mc_platform_node, int coherent)
-{
-	const struct iommu_ops *ops;
-
-	ops = fsl_mc_iommu_configure(mc_dev, fsl_mc_platform_node);
-
-	mc_dev->dev.coherent_dma_mask = DMA_BIT_MASK(48);
-	mc_dev->dev.dma_mask = &mc_dev->dev.coherent_dma_mask;
-	arch_setup_dma_ops(&mc_dev->dev, 0,
-		mc_dev->dev.coherent_dma_mask + 1, ops, coherent);
-}
-
-/* Macro to get the container device of a MC device */
-#define fsl_mc_cont_dev(_dev) ((to_fsl_mc_device(_dev)->flags & \
-	FSL_MC_IS_DPRC) ? (_dev) : ((_dev)->parent))
-
-/* Macro to check if a device is a container device */
-#define is_cont_dev(_dev) (to_fsl_mc_device(_dev)->flags & FSL_MC_IS_DPRC)
-
-/* Get the IOMMU group for device on fsl-mc bus */
-struct iommu_group *fsl_mc_device_group(struct device *dev)
-{
-	struct device *cont_dev = fsl_mc_cont_dev(dev);
-	struct iommu_group *group;
-
-	/* Container device is responsible for creating the iommu group */
-	if (is_cont_dev(dev)) {
-		group = iommu_group_alloc();
-		if (IS_ERR(group))
-			return NULL;
-	} else {
-		get_device(cont_dev);
-		group = iommu_group_get(cont_dev);
-		put_device(cont_dev);
-	}
-
-	return group;
-}
diff --git a/include/linux/fsl/mc.h b/include/linux/fsl/mc.h
index 9ccfc6b..4ce9a93 100644
--- a/include/linux/fsl/mc.h
+++ b/include/linux/fsl/mc.h
@@ -408,6 +408,9 @@ struct irq_domain *fsl_mc_msi_create_irq_domain(struct fwnode_handle *fwnode,
 
 void fsl_mc_free_irqs(struct fsl_mc_device *mc_dev);
 
+void fsl_mc_dma_configure(struct fsl_mc_device *mc_dev,
+	struct device_node *fsl_mc_platform_node, int coherent);
+
 extern struct bus_type fsl_mc_bus_type;
 
 extern struct device_type fsl_mc_bus_dprc_type;
@@ -786,6 +789,8 @@ enum dprc_region_type {
 	DPRC_REGION_TYPE_QBMAN_PORTAL
 };
 
+#define DPRC_OBJ_FLAG_NO_MEM_SHAREABILITY       0x0001
+
 /**
  * struct dprc_region_desc - Mappable region descriptor
  * @base_offset: Region offset from region's base address.
-- 
1.7.1

