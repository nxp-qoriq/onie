From fb704a410cb1f883e31ab07e3dc8f11b91d7b87e Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Thu, 5 Apr 2018 17:40:17 +0300
Subject: [PATCH 267/448] staging: fsl-dpaa2/eth: Make hash key configurable

Re-add support for changing the Rx hash key through ethtool.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c     |   17 +++++++++------
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h     |    3 ++
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c |   21 ++++++++++++++++++-
 3 files changed, 32 insertions(+), 9 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index fdd3563..a9b59d0 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2694,12 +2694,13 @@ static int config_fs_key(struct dpaa2_eth_priv *priv, dma_addr_t key_iova)
 	return 0;
 }
 
-static int dpaa2_eth_set_dist_key(struct dpaa2_eth_priv *priv,
-				  enum dpaa2_eth_rx_dist type, u32 key_fields)
+int dpaa2_eth_set_dist_key(struct dpaa2_eth_priv *priv,
+			   enum dpaa2_eth_rx_dist type, u32 key_fields)
 {
 	struct device *dev = priv->net_dev->dev.parent;
 	struct dpkg_profile_cfg cls_cfg;
 	struct dpkg_extract *key;
+	u32 hash_fields = 0;
 	dma_addr_t key_iova;
 	u8 *key_mem;
 	int i, err;
@@ -2717,10 +2718,7 @@ static int dpaa2_eth_set_dist_key(struct dpaa2_eth_priv *priv,
 		key->extract.from_hdr.field = priv->dist_fields[i].cls_field;
 		cls_cfg.num_extracts++;
 
-		if (type == DPAA2_ETH_RX_DIST_FS)
-			continue;
-
-		priv->rx_hash_fields |= priv->dist_fields[i].rxnfc_field;
+		hash_fields |= priv->dist_fields[i].rxnfc_field;
 	}
 
 	key_mem = kzalloc(DPAA2_CLASSIFIER_DMA_SIZE, GFP_KERNEL);
@@ -2758,8 +2756,13 @@ static int dpaa2_eth_set_dist_key(struct dpaa2_eth_priv *priv,
 
 	dma_unmap_single(dev, key_iova, DPAA2_CLASSIFIER_DMA_SIZE,
 			 DMA_TO_DEVICE);
-	if (err)
+	if (err) {
 		dev_err(dev, "Distribution key config failed\n");
+		goto free_key;
+	}
+
+	if (type != DPAA2_ETH_RX_DIST_FS)
+		priv->rx_hash_fields = hash_fields;
 
 free_key:
 	kfree(key_mem);
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
index 076c99d..a051bcd 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.h
@@ -594,4 +594,7 @@ static inline int dpaa2_eth_ch_count(struct dpaa2_eth_priv *priv)
 
 int set_rx_taildrop(struct dpaa2_eth_priv *priv);
 
+int dpaa2_eth_set_dist_key(struct dpaa2_eth_priv *priv,
+			   enum dpaa2_eth_rx_dist type, u32 key_fields);
+
 #endif	/* __DPAA2_H */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
index c721b98..1a1fc82 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-ethtool.c
@@ -773,6 +773,22 @@ static int del_cls(struct net_device *net_dev, int location)
 	return 0;
 }
 
+static int set_hash(struct net_device *net_dev, u64 data)
+{
+	struct dpaa2_eth_priv *priv = netdev_priv(net_dev);
+	u32 key = 0;
+	int i;
+
+	if (data & RXH_DISCARD)
+		return -EOPNOTSUPP;
+
+	for (i = 0; i < priv->num_dist_fields; i++)
+		if (priv->dist_fields[i].rxnfc_field & data)
+			key |= priv->dist_fields[i].id;
+
+	return dpaa2_eth_set_dist_key(priv, DPAA2_ETH_RX_DIST_HASH, key);
+}
+
 static int dpaa2_eth_set_rxnfc(struct net_device *net_dev,
 			       struct ethtool_rxnfc *rxnfc)
 {
@@ -782,11 +798,12 @@ static int dpaa2_eth_set_rxnfc(struct net_device *net_dev,
 	case ETHTOOL_SRXCLSRLINS:
 		err = add_cls(net_dev, &rxnfc->fs);
 		break;
-
 	case ETHTOOL_SRXCLSRLDEL:
 		err = del_cls(net_dev, rxnfc->fs.location);
 		break;
-
+	case ETHTOOL_SRXFH:
+		err = set_hash(net_dev, rxnfc->data);
+		break;
 	default:
 		err = -EOPNOTSUPP;
 	}
-- 
1.7.1

