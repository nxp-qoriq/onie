From b76e0cfb05e3c05c6e6c3f97a54acfe28c622354 Mon Sep 17 00:00:00 2001
From: Guanhua Gao <guanhua.gao@nxp.com>
Date: Fri, 18 May 2018 11:10:27 +0800
Subject: [PATCH 200/448] staging: fsl-dpaa2/eth: PFC cleanup and refactor

- in setpfc, zero out unavailable traffic classes
- restore driver old pfc config in case of congeestion / taildrop setup
  failures
- fix PFC capable traffic classes nitpick
- add debug prints along the PFC setup routine

Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c |   38 +++++++++++++++++++----
 1 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
index 75554fb..59caee2 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpaa2-eth.c
@@ -2318,6 +2318,7 @@ static int set_queue_taildrop(struct dpaa2_eth_priv *priv,
 	for (i = 0; i < priv->num_fqs; i++) {
 		if (priv->fq[i].type != DPAA2_RX_FQ)
 			continue;
+
 		err = dpni_set_taildrop(priv->mc_io, 0, priv->mc_token,
 					DPNI_CP_QUEUE, DPNI_QUEUE_RX,
 					priv->fq[i].tc, priv->fq[i].flowid,
@@ -2326,6 +2327,10 @@ static int set_queue_taildrop(struct dpaa2_eth_priv *priv,
 			dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
 			return err;
 		}
+
+		dev_dbg(dev, "%s taildrop for Rx group tc %d\n",
+			(td->enable ? "Enabled" : "Disabled"),
+			i);
 	}
 
 	return 0;
@@ -2356,6 +2361,10 @@ static int set_group_taildrop(struct dpaa2_eth_priv *priv,
 			dev_err(dev, "dpni_set_taildrop() failed (%d)\n", err);
 			return err;
 		}
+
+		dev_dbg(dev, "%s taildrop for Rx queue id %d tc %d\n",
+			(tc_td->enable ? "Enabled" : "Disabled"),
+			priv->fq[i].flowid, priv->fq[i].tc);
 	}
 
 	return 0;
@@ -3065,7 +3074,7 @@ static int dpaa2_eth_dcbnl_ieee_getpfc(struct net_device *net_dev,
 	struct dpni_link_state state;
 	int err, i;
 
-	pfc->pfc_cap = dpaa2_eth_tc_count(priv);
+	priv->pfc.pfc_cap = dpaa2_eth_tc_count(priv);
 
 	err = dpni_get_link_state(priv->mc_io, 0, priv->mc_token, &state);
 	if (err) {
@@ -3092,9 +3101,7 @@ static int dpaa2_eth_dcbnl_ieee_getpfc(struct net_device *net_dev,
 			priv->pfc.pfc_en |= 1 << i;
 	}
 
-	pfc->pfc_en = priv->pfc.pfc_en;
-	pfc->mbc = priv->pfc.mbc;
-	pfc->delay = priv->pfc.delay;
+	memcpy(pfc, &priv->pfc, sizeof(priv->pfc));
 
 	return 0;
 }
@@ -3235,6 +3242,7 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 	struct dpni_congestion_notification_cfg notification_cfg = {0};
 	struct dpni_link_state state = {0};
 	struct dpni_link_cfg cfg = {0};
+	struct ieee_pfc old_pfc;
 	int err = 0, i;
 
 	if (dpaa2_eth_tc_count(priv) == 1) {
@@ -3242,6 +3250,9 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 		return 0;
 	}
 
+	/* Zero out pfc_enabled prios greater than tc_count */
+	pfc->pfc_en &= (1 << dpaa2_eth_tc_count(priv)) - 1;
+
 	if (priv->pfc.pfc_en == pfc->pfc_en)
 		/* Same enabled mask, nothing to be done */
 		return 0;
@@ -3269,11 +3280,12 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 		return err;
 	}
 
+	memcpy(&old_pfc, &priv->pfc, sizeof(priv->pfc));
 	memcpy(&priv->pfc, pfc, sizeof(priv->pfc));
 
 	err = set_rx_taildrop(priv);
 	if (err)
-		return err;
+		goto out_restore_config;
 
 	/* configure congestion notifications */
 	notification_cfg.notification_mode = DPNI_CONG_OPT_FLOW_CONTROL;
@@ -3297,11 +3309,19 @@ static int dpaa2_eth_dcbnl_ieee_setpfc(struct net_device *net_dev,
 		if (err) {
 			netdev_err(net_dev, "Error %d setting congestion notif",
 				   err);
-			return err;
+			goto out_restore_config;
 		}
+
+		netdev_dbg(net_dev, "%s congestion notifications for tc %d\n",
+			   (notification_cfg.threshold_entry ?
+			    "Enabled" : "Disabled"), i);
 	}
 
 	return 0;
+
+out_restore_config:
+	memcpy(&priv->pfc, &old_pfc, sizeof(priv->pfc));
+	return err;
 }
 
 static u8 dpaa2_eth_dcbnl_getdcbx(struct net_device *net_dev)
@@ -3328,7 +3348,11 @@ static u8 dpaa2_eth_dcbnl_getcap(struct net_device *net_dev, int capid, u8 *cap)
 		*cap = true;
 		break;
 	case DCB_CAP_ATTR_PFC_TCS:
-		*cap = 1 << dpaa2_eth_tc_count(priv);
+		/* bitmap where each bit represents a number of traffic
+		 * classes the device can be configured to use for Priority
+		 * Flow Control
+		 */
+		*cap = 1 << (dpaa2_eth_tc_count(priv) - 1);
 		break;
 	case DCB_CAP_ATTR_DCBX:
 		*cap = priv->dcbx_mode;
-- 
1.7.1

